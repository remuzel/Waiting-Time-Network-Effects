import argparse
import numpy as np
from tqdm import tqdm

np.random.seed(1_218_042)

from simulator import AgentSimulator
from utils import conf_interval

if __name__ == "__main__":

    arguments = {
        '--N': ["Population size to consider during the simulation.", int, 1_000],
        '--P': ["Number of platforms to consider during the simulation.", int, 2],
        '--it': ["Number of iterations to get average.", int, 1_000],
        '--plt': ["Filename underwich to save the figure.", str, None],
        '--r': ["Proportion of rider agents generated by the simulation.", float, 0.95],
        '--mu_r': ["Rate at which riders leave the platform.", float, 0.5],
        '--mu_d': ["Rate at which drivers leave the platform.", float, 0.5],
        '--raw': ["Flag to save the raw heatmap data.", bool, False],
        '--plt_type': ["1) Plot marketshares only 2) Plot population only 3) Plot both", int, 3],
        '--n_joins': ["Number of agents that are released to the market at each iteration.", int, 1],
        '--eta': ["The price coefficient eta", float, 0]
    }

    parser = argparse.ArgumentParser()
    for arg, (_help, _type, _default) in arguments.items():
        parser.add_argument(arg, help=_help, type=_type, default=_default)
    args = parser.parse_args()

    names = ['Uber', 'Black Cab', 'Bolt', 'Kapten', 'Heetch'][:args.P]
    
    eta_rider = []
    eta_driver = []
    for eta in tqdm(np.linspace(0, 1)):
        rider_stuff = []
        driver_stuff = []
        for _ in tqdm(range(10)):
            iter_ms = []
            iter_r = []
            iter_d = []
            # Run the simulation it times
            for i in tqdm(range(args.it)):
                sim = AgentSimulator(args.N, names, rider_proportion=args.r,
                                    mu_D=args.mu_d, mu_R=args.mu_r, eta=eta, n_joins=args.n_joins)
                # Sort the returned shares and agent numbers (who the winner is doesn't matter)
                m_shares = sorted(sim.run().get_market_shares(), key=lambda x: x[-1])
                riders = sorted(sim.get_riders(), key=lambda x: x[-1])
                drivers = sorted(sim.get_drivers(), key=lambda x: x[-1])
                # Store the data
                iter_ms.append(m_shares)
                iter_r.append(riders)
                iter_d.append(drivers)
            # Get means of winner / looser over the runs
            _format = lambda d, i: np.array([conf_interval(np.array(p), axis=0)[i] for p in zip(*d)])
            avg_ms, avg_r, avg_d = _format(iter_ms, 0), _format(iter_r, 0), _format(iter_d, 0)
            std_ms, std_r, std_d = _format(iter_ms, 1), _format(iter_r, 1), _format(iter_d, 1)
            data = {
                "avg_ms": avg_ms,
                "std_ms": std_ms,
                "avg_r": avg_r,
                "std_r": std_r,
                "avg_d": avg_d,
                "std_d": std_d
            }
            rider_stuff.append(avg_r[0,-1])
            driver_stuff.append(avg_d[0,-1])
        eta_rider.append(np.mean(rider_stuff))
        eta_driver.append(np.mean(driver_stuff))
        
    np.savetxt('txt_out/eta_rider.txt', eta_rider)
    np.savetxt('txt_out/eta_driver.txt', eta_driver)